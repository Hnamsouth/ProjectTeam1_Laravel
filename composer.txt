
CREATE project:
    cmd- composer create-project laravel/laravel example-app
START project :
    cmd- php artisan serve
CREATE Controller:  /app/Http/Controller
    cmd- php artisan make:controller DemoController
CREATE Middleware: /app/Http/Middleware
    --all middlewares created will need to be defined in Kernel to use it
    cmd- php artisan make:middleware CheckPermission
CREATE Model: Used to interact and generate fake data into the database /app/Models
    cmd- php artisan make:model Category
CREATE Factory: Used to set data for each column in the table  /database/factories
    cmd- php artisan make:factory CategoryFactory
Seeding Data fake:
    --execute run() function from /database/seeders/DatabaseSeeder
    --use model to generate fake data, please note that fake data needs to be configured in the factory before generation.
    cmd-  php artisan db:seed
MIGRATION:Migrations allow you to modify your database schema in a structured and organized way, and Laravel's migration system helps you manage these changes easily
    CREATE migration:
        cmd-  php artisan make:migration create_table_catefories --create=categories
    run migration file:
        cmd-  php artisan migrate
    rollback step:
        cmd- php artisan migrate:rollback  previous step
        cmd- php artisan migrate:rollback --step=2
    refresh all migrations: Recreate all table
        cmd- php artisan migrate:refresh
        cmd- php artisan migrate:refresh --seed . To recreate all tables and seeding data in database seeder /database/DatabaseSeeder


set database in .env file

SETUP tailwind

// up date migration  :
    cmd- php artisan make:migration update_table_order --table=orders
    // if this table had model

//            DB::connection()->  connect to other database

https://tailwindcss.com/docs/guides/laravel#vite

// muốn tạo helper phải khai báo thêm thuộc tính 'files'  trong composer.josn

"autoload": {
        "files": [
            "app/Helpers/helper.php"
        ]
    },


// install jwt
composer require tymon/jwt-auth:^1.0.2
Mở file config/app.php và thêm provider sau vào mảng providers:

'providers' => [
    Tymon\JWTAuth\Providers\LaravelServiceProvider::class,
],
Thêm các facades sau vào mảng aliases:
'aliases' => [
    'JWTAuth' => Tymon\JWTAuth\Facades\JWTAuth::class,
    'JWTFactory' => Tymon\JWTAuth\Facades\JWTFactory::class,
],
Tiếp đó, sử dụng lệnh sau để public các file JWT Auth từ trong vendor sang config/jwt.php:
    php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"

Như các bạn đã biết, để mã hóa chuỗi token, ta phải sử dụng một khóa bí mật (secret key). Sử dụng lệnh sau để tạo secret key:
    php artisan jwt:secret


//    $this->hasOne() quan hệ, 1 - 1
//    $this->hasMany()  quan hệ, 1 - nhiều
//    $this->belongsTo() , quan hệ, 1 -1 or 1 - nhiều
//    $this->belongsToMany() , quan hệ nhiều nhiều

//    $this->hasManyThrough() , lấy dữ liệu thông qua nhiều bảng trung gian
//    $this->hasOneThrough() , lấy dữ liệu thông qua 1 trung gian

//     Quan hệ đa hình là một model có thể có quan hệ với nhiều model khác nhau trên một cột (không cần thông qua kết nối giữa khóa chính và khóa ngoại).
//    $this->morphOne() quan hệ đa hình 1-1 ,
//     $this->morphMany() quan hệ đa hình 1- nhiều,
//     $this->morphToMany()  quan hệ đa hình nhiều - nhiều,
//     $this->morphTo()  nghịch đảo.
//      vd:
// 1 bài viết sẽ có nhiều hình ảnh
//class Post extends Model{   public function images(){   return $this->morphMany(Image::class, 'imageable'); }   }
//  khi gọi hàm images() nó sẽ trả về tất cả record có của bảng images có trùng 1 cap khóa ngoại của 2 bảng image và post thông qua bảng trung gian imageable
//  1 hình ảnh có thể sử dụng trong nhiều bài viết hoặc sản phẩm hoặc user
//class Image extends Model{  public function imageable(){    return $this->morphTo();    }   }


//  has many acc, card, deposit(saving), loan, transaction
//hasone(one to one)  user_info, user_secret,






